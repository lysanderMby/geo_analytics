// Re-export API types
export * from '../lib/api'
import type { User } from '../lib/api'

// Additional frontend-specific types
export interface OnboardingData {
  email: string
  business_name: string
  website: string
  sector: string
  business_size: 'startup' | 'small' | 'medium' | 'large' | 'enterprise'
  location: string
  description?: string
}

export interface ApiKeyConfiguration {
  openai?: string
  anthropic?: string
  gemini?: string
}

export interface ModelConfiguration {
  provider: 'openai' | 'anthropic' | 'gemini'
  model: string
  enabled: boolean
}

export interface BulkTestProgress {
  testId: string
  status: 'pending' | 'running' | 'completed' | 'failed'
  totalTests: number
  completedTests: number
  failedTests: number
  estimatedCompletion?: string
}

export interface CompetitorMentionData {
  name: string
  mentions: number
  mentionRate: number
  trend: 'up' | 'down' | 'stable'
}

export interface ModelPerformanceData {
  provider: string
  model: string
  totalResponses: number
  userMentions: number
  mentionRate: number
  avgResponseTime?: number
}

export interface ChartDataPoint {
  name: string
  value: number
  percentage?: number
}

export interface TimeSeriesDataPoint {
  date: string
  userMentions: number
  competitorMentions: number
  totalMentions: number
}

export interface NotificationMessage {
  id: string
  type: 'success' | 'error' | 'warning' | 'info'
  title: string
  message: string
  timestamp: string
  read: boolean
}

export interface AppState {
  user: User | null
  isLoading: boolean
  error: string | null
  notifications: NotificationMessage[]
}

// Form validation schemas
export interface FormErrors {
  [key: string]: string | undefined
}

export interface OnboardingFormData extends OnboardingData {
  acceptTerms: boolean
}

export interface ApiKeyFormData {
  provider: 'openai' | 'anthropic' | 'gemini'
  apiKey: string
  testConnection: boolean
}

export interface PromptFormData {
  content: string
  category?: string
  isAutoGenerated: boolean
}

export interface CompetitorFormData {
  name: string
  website?: string
  description?: string
}

// Navigation types
export interface NavigationItem {
  label: string
  href: string
  icon?: string
  badge?: number
  external?: boolean
}

export interface BreadcrumbItem {
  label: string
  href?: string
  isCurrentPage?: boolean
}

// Table types
export interface TableColumn<T> {
  key: keyof T | string
  label: string
  sortable?: boolean
  render?: (value: any, row: T) => React.ReactNode
  width?: string
  align?: 'left' | 'center' | 'right'
}

export interface TableProps<T> {
  data: T[]
  columns: TableColumn<T>[]
  loading?: boolean
  emptyMessage?: string
  onRowClick?: (row: T) => void
  pagination?: {
    currentPage: number
    totalPages: number
    onPageChange: (page: number) => void
  }
  sorting?: {
    column: string
    direction: 'asc' | 'desc'
    onSort: (column: string, direction: 'asc' | 'desc') => void
  }
}

// Filter and search types
export interface FilterOption {
  label: string
  value: string
  count?: number
}

export interface SearchFilters {
  query?: string
  category?: string
  provider?: string
  model?: string
  dateRange?: {
    start: string
    end: string
  }
  mentionType?: 'user' | 'competitor' | 'all'
}

// Settings types
export interface UserSettings {
  theme: 'light' | 'dark' | 'system'
  notifications: {
    email: boolean
    browser: boolean
    analysis_complete: boolean
    weekly_reports: boolean
  }
  privacy: {
    analytics_tracking: boolean
    data_retention_days: number
  }
  api: {
    rate_limiting: boolean
    preferred_models: ModelConfiguration[]
  }
} 